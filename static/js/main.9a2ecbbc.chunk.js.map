{"version":3,"sources":["images/bg.jpg","API.tsx","Utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","value","disabled","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","nextQuestion","length","e","currentTarget","answerObject","prev","error","console","log","undefined","TOTAL_QUESTION","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9a2ecbbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.aa13d9e2.jpg\";","import { shuffleArray } from \"./Utils\";\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n};\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n\r\n    return data.results.map((question: Question) => {\r\n        return {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers,\r\n                question.correct_answer\r\n            ])\r\n        }\r\n    });\r\n};","export const shuffleArray = (array: any[]) => {\r\n    return [...array].sort(() => Math.random() - 0.5);\r\n}\r\n\r\nexport type AnswerObject = {\r\n    question: string,\r\n    answer: string,\r\n    correct: boolean,\r\n    correctAnswer: string\r\n}; ","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n        correct\r\n            ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n            : !correct && userClicked\r\n                ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from 'react';\r\nimport { AnswerObject } from '../Utils';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestions\r\n}) => {\r\n    return (\r\n        <Wrapper>\r\n\r\n            <p className='number'>\r\n                Question: {questionNr} / {totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div>\r\n                {\r\n                    answers.map((answer) => {\r\n                        return <div key={answer}>\r\n                            <ButtonWrapper\r\n                                key={answer}\r\n                                correct={userAnswer?.correctAnswer === answer}\r\n                                userClicked={userAnswer?.answer === answer}\r\n                            >\r\n                                <button\r\n                                    value={answer}\r\n                                    disabled={!!userAnswer}\r\n                                    onClick={callback}\r\n                                >\r\n                                    <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                                </button>\r\n                            </ButtonWrapper>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/bg.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;","import React, { useState } from 'react';\nimport { Difficulty, fetchQuizQuestions, QuestionState } from './API';\nimport QuestionCard from './components/QuestionCard';\nimport { AnswerObject } from './Utils';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\n\nconst TOTAL_QUESTION = 10;\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTION, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    try {\n      //user answer\n      const answer = e.currentTarget.value;\n\n      //check user answer\n      const correct = questions[number].correct_answer === answer;\n\n      //add score if answer id correct\n      if (correct)\n        setScore(score + 1);\n\n      //save answer in array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers((prev) => [...prev, answerObject]);\n    } catch (error) {\n      console.log(\"checkAnswer -> error\", error)\n    }\n  };\n\n  const renderBtnStart = () => {\n    return gameOver || userAnswers.length === TOTAL_QUESTION ? (\n      <button className=\"start\" onClick={startTrivia}>\n        Start\n      </button>\n    ) : null;\n  };\n\n  const renderBtnNext = () => {\n    return (!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTION - 1) ?\n      <button className=\"next\" onClick={nextQuestion}>\n        Next question\n      </button> : null\n  };\n\n  const nextQuestion = () => {\n    //move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTION) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n\n  };\n\n  return <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>REACT QUIZ</h1>\n      {renderBtnStart()}\n      {gameOver ? null : <p className=\"score\">Score: {score}</p>}\n      {loading && <p>Loading question ...</p>}\n      {!loading && !gameOver && questions.length > 0 &&\n        (\n          <QuestionCard\n            question={questions[number].question}\n            answers={questions[number].answers}\n            callback={checkAnswer}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTION}\n          />\n        )\n      }\n      {renderBtnNext()}\n    </Wrapper>\n  </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}